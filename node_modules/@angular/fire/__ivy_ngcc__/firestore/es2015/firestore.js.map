{"version":3,"sources":["/home/muhammad/Documents/uniconnects2/uniconnects/node_modules/@angular/fire/firestore/es2015/firestore.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gHA4FE;+BAC6B,AAE5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAQkB","file":"firestore.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { InjectionToken, NgZone, PLATFORM_ID, Injectable, Inject, Optional } from '@angular/core';\nimport { of, from } from 'rxjs';\nimport { AngularFirestoreDocument } from './document/document';\nimport { AngularFirestoreCollection } from './collection/collection';\nimport { AngularFirestoreCollectionGroup } from './collection-group/collection-group';\nimport { FIREBASE_OPTIONS, FIREBASE_APP_NAME, _firebaseAppFactory, ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport firebase from 'firebase/app';\nexport const EnablePersistenceToken = new InjectionToken('angularfire2.enableFirestorePersistence');\nexport const PersistenceSettingsToken = new InjectionToken('angularfire2.firestore.persistenceSettings');\nexport const FirestoreSettingsToken = new InjectionToken('angularfire2.firestore.settings');\nexport const ENABLE_PERSISTENCE = EnablePersistenceToken;\nexport const PERSISTENCE_SETTINGS = PersistenceSettingsToken;\nexport const SETTINGS = FirestoreSettingsToken;\nconst major = parseInt(firebase.SDK_VERSION.split('.')[0]);\nconst minor = parseInt(firebase.SDK_VERSION.split('.')[1]);\nexport const DefaultFirestoreSettings = ((major < 5 || (major == 5 && minor < 8)) ? { timestampsInSnapshots: true } : {});\nexport function associateQuery(collectionRef, queryFn = ref => ref) {\n    const query = queryFn(collectionRef);\n    const ref = collectionRef;\n    return { query, ref };\n}\nlet AngularFirestore = class AngularFirestore {\n    constructor(options, nameOrConfig, shouldEnablePersistence, settings, platformId, zone, persistenceSettings) {\n        this.schedulers = new ɵAngularFireSchedulers(zone);\n        this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers, platformId);\n        this.firestore = zone.runOutsideAngular(() => {\n            const app = _firebaseAppFactory(options, zone, nameOrConfig);\n            const firestore = app.firestore();\n            firestore.settings(settings || DefaultFirestoreSettings);\n            return firestore;\n        });\n        if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n            const enablePersistence = () => {\n                try {\n                    return from(this.firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n                }\n                catch (e) {\n                    return of(false);\n                }\n            };\n            this.persistenceEnabled$ = zone.runOutsideAngular(enablePersistence);\n        }\n        else {\n            this.persistenceEnabled$ = of(false);\n        }\n    }\n    collection(pathOrRef, queryFn) {\n        let collectionRef;\n        if (typeof pathOrRef === 'string') {\n            collectionRef = this.firestore.collection(pathOrRef);\n        }\n        else {\n            collectionRef = pathOrRef;\n        }\n        const { ref, query } = associateQuery(collectionRef, queryFn);\n        return new AngularFirestoreCollection(ref, query, this);\n    }\n    collectionGroup(collectionId, queryGroupFn) {\n        if (major < 6) {\n            throw \"collection group queries require Firebase JS SDK >= 6.0\";\n        }\n        const queryFn = queryGroupFn || (ref => ref);\n        const firestore = this.firestore;\n        const collectionGroup = firestore.collectionGroup(collectionId);\n        return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n    }\n    doc(pathOrRef) {\n        let ref;\n        if (typeof pathOrRef === 'string') {\n            ref = this.firestore.doc(pathOrRef);\n        }\n        else {\n            ref = pathOrRef;\n        }\n        return new AngularFirestoreDocument(ref, this);\n    }\n    createId() {\n        return this.firestore.collection('_').doc().id;\n    }\n};\nAngularFirestore = __decorate([\n    Injectable(),\n    __param(0, Inject(FIREBASE_OPTIONS)),\n    __param(1, Optional()), __param(1, Inject(FIREBASE_APP_NAME)),\n    __param(2, Optional()), __param(2, Inject(ENABLE_PERSISTENCE)),\n    __param(3, Optional()), __param(3, Inject(SETTINGS)),\n    __param(4, Inject(PLATFORM_ID)),\n    __param(6, Optional()), __param(6, Inject(PERSISTENCE_SETTINGS)),\n    __metadata(\"design:paramtypes\", [Object, Object, Object, Object, Object,\n        NgZone, Object])\n], AngularFirestore);\nexport { AngularFirestore };\n"]}